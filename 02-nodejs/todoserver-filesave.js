/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
*/
  const express = require('express');
  const bodyParser = require('body-parser');
  var fs = require('fs');
      
  const app = express();
  app.use(bodyParser.json());
  
  var todo =[];
  
  app.get('/todos', (req, res) => {
    fs.readFile('todo.json', 'utf8', (err, data) => {
        if (err) {
          console.error('Error reading the JSON file:', err);
          return;
        }      
        try {
          const jsonData = JSON.parse(data);
        //   console.log(jsonData);
        res.json(jsonData);
        } catch (error) {
          console.error('Error parsing JSON data:', error);
        }
        res.json(todo);
        });
    });

  app.get('/todos/:ID', (req, res) => {
    var parid = parseInt(req.params.ID);
    console.log(parid);
  
       for (var i=0 ; i<todo.length; i++){
        if (parid==todo[i].ID){
            fs.readFile('todo.json', 'utf8', (err, data) => {
                if (err) {
                  console.error('Error reading the JSON file:', err);
                  return;
                }      
                try {
                  const jsonData = JSON.parse(data);
                //   console.log(jsonData);
                res.status(201).json(jsonData[i]);
                } catch (error) {
                  console.error('Error parsing JSON data:', error);
                }
                });
         }
        else{
          res.status(401);
        }}}
          
  );
   
  
    app.post('/todos', (req, res) => {
        var IDs = Math. floor(Math. random() * 100);
        var newtodo ={
        ID : IDs,
        title : req.body.title,
        completed : req.body.completed,
        description : req.body.description
        };
        todo.push(newtodo);
        var jsonData = JSON.stringify(todo);
        fs.writeFile("todo.json", jsonData, function(err, data) {
            if (err) {
            console.log(err);
            }
            });
        res.json(newtodo);
        }
    );

app.listen(3000);
  
//   app.put('/todos/:ID', (req, res) => {
//     var parid = parseInt(req.params.ID);
  
//     for (var i=0 ; i<todo.length; i++){
//         if (parid==todo[i].ID){
//           var updatedtodo ={
//             ID : parid ,
//             title : req.body.title,
//             completed : req.body.completed,
//             description : req.body.description
//           };
//           todo[i]=(updatedtodo);
//           res.status(201).json(todo[i]);
//          }
//         else{
//           res.status(401);
//         }}})
//          ;
  
//   app.delete('/todos/:ID', (req, res) => {
//   var parid = parseInt(req.params.ID);
//   console.log(parid);
//   var updateddtodo =[];
//       for (var i=0 ; i<todo.length; i++)
//       {
//         if (parid==todo[i].ID){
//           res.status(201);
//           }
//         else{      
//           updateddtodo.push(todo[i]);
//           res.status(201);
//         }
//       }
//       todo=updateddtodo;
//     }   
//   );
  
  app.listen(3000);